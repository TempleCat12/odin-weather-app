(()=>{"use strict";var e={424:(e,n,t)=>{t.d(n,{Z:()=>s});var r=t(537),o=t.n(r),i=t(645),a=t.n(i),c=t(667),A=t.n(c),l=new URL(t(358),t.b),d=a()(o()),p=A()(l);d.push([e.id,'* {\n    padding: 0;\n    margin: 0;\n    \n}\nsvg, h3 {\n    color: #fb923c;\n}\ninput {\n    flex: 1;\n    background-color: inherit;\n    border: 0;\n    border-bottom: 2px solid #fb923c;\n    color: inherit;\n    font-size: 22px;\n    outline: none;\n}\ninput::placeholder{\n    color: #a3a3a3;\n}\nbutton {\n    font-size: 22px;\n    color: inherit;\n    border: 0;\n    background-color: inherit;\n    transition: transform 0.1s ease;\n}\nbutton:hover {\n    transform: scale(1.3);\n}\nul {\n    display: flex;\n    flex-direction: column;\n    gap: 20px;\n}\nli > p {\n    font-size: 22px;\n}\n/* li > p:last-child {\n    color: #fb923c;\n} */\nli::marker {\n    content: \'\';\n}\n#content {\n    font-family:-apple-system,BlinkMacSystemFont,"Segoe UI","Noto Sans",Helvetica,Arial,sans-serif,"Apple Color Emoji","Segoe UI Emoji", monospace, \'Courier New\', Courier ;\n    /* font-weight: 600; */\n    color: #fff;\n    display: flex;\n    height: 100vh;\n    background: center 100% no-repeat url('+p+");\n}\n#content > div {\n    padding-top: 60px;\n}\n\n#display {\n    padding-bottom: 60px;\n    display: flex;\n    flex-direction: column;\n    justify-content: space-between;\n    flex: 1;\n    padding-left: 60px;\n}\n#weather {\n    padding: 5px 20px;\n    background-color: rgba(31, 41, 55, 0.5);\n    display: flex;\n    gap: 15px;\n    align-items: center;\n    width: fit-content;\n}\n#weather > p{\n    line-height: 80px;\n    font-size: 80px;\n}\n#weather > div {\n    display: flex;\n    flex-direction: column;\n    text-align: center;\n}\n#weather > div > p:first-child {\n    font-size: 35px;\n    line-height: 35px;\n}\n#menu {\n    display: flex;\n    flex-direction: column;\n    gap: 50px;\n    width: 25vw;\n    padding-left: 50px;\n    padding-right: 50px;\n\n    background-color: rgba(31, 41, 55, 0.5);\n}\n#form {\n    display: flex;\n    gap: 10px;\n    align-items: center;\n}\n#detail {\n    display: flex;\n    flex-direction: column;\n    gap: 20px;\n}\n#detail li {\n    display: flex;\n    justify-content: space-between;\n}\n","",{version:3,sources:["webpack://./src/index.css"],names:[],mappings:"AAAA;IACI,UAAU;IACV,SAAS;;AAEb;AACA;IACI,cAAc;AAClB;AACA;IACI,OAAO;IACP,yBAAyB;IACzB,SAAS;IACT,gCAAgC;IAChC,cAAc;IACd,eAAe;IACf,aAAa;AACjB;AACA;IACI,cAAc;AAClB;AACA;IACI,eAAe;IACf,cAAc;IACd,SAAS;IACT,yBAAyB;IACzB,+BAA+B;AACnC;AACA;IACI,qBAAqB;AACzB;AACA;IACI,aAAa;IACb,sBAAsB;IACtB,SAAS;AACb;AACA;IACI,eAAe;AACnB;AACA;;GAEG;AACH;IACI,WAAW;AACf;AACA;IACI,uKAAuK;IACvK,sBAAsB;IACtB,WAAW;IACX,aAAa;IACb,aAAa;IACb,yEAA2D;AAC/D;AACA;IACI,iBAAiB;AACrB;;AAEA;IACI,oBAAoB;IACpB,aAAa;IACb,sBAAsB;IACtB,8BAA8B;IAC9B,OAAO;IACP,kBAAkB;AACtB;AACA;IACI,iBAAiB;IACjB,uCAAuC;IACvC,aAAa;IACb,SAAS;IACT,mBAAmB;IACnB,kBAAkB;AACtB;AACA;IACI,iBAAiB;IACjB,eAAe;AACnB;AACA;IACI,aAAa;IACb,sBAAsB;IACtB,kBAAkB;AACtB;AACA;IACI,eAAe;IACf,iBAAiB;AACrB;AACA;IACI,aAAa;IACb,sBAAsB;IACtB,SAAS;IACT,WAAW;IACX,kBAAkB;IAClB,mBAAmB;;IAEnB,uCAAuC;AAC3C;AACA;IACI,aAAa;IACb,SAAS;IACT,mBAAmB;AACvB;AACA;IACI,aAAa;IACb,sBAAsB;IACtB,SAAS;AACb;AACA;IACI,aAAa;IACb,8BAA8B;AAClC",sourcesContent:['* {\n    padding: 0;\n    margin: 0;\n    \n}\nsvg, h3 {\n    color: #fb923c;\n}\ninput {\n    flex: 1;\n    background-color: inherit;\n    border: 0;\n    border-bottom: 2px solid #fb923c;\n    color: inherit;\n    font-size: 22px;\n    outline: none;\n}\ninput::placeholder{\n    color: #a3a3a3;\n}\nbutton {\n    font-size: 22px;\n    color: inherit;\n    border: 0;\n    background-color: inherit;\n    transition: transform 0.1s ease;\n}\nbutton:hover {\n    transform: scale(1.3);\n}\nul {\n    display: flex;\n    flex-direction: column;\n    gap: 20px;\n}\nli > p {\n    font-size: 22px;\n}\n/* li > p:last-child {\n    color: #fb923c;\n} */\nli::marker {\n    content: \'\';\n}\n#content {\n    font-family:-apple-system,BlinkMacSystemFont,"Segoe UI","Noto Sans",Helvetica,Arial,sans-serif,"Apple Color Emoji","Segoe UI Emoji", monospace, \'Courier New\', Courier ;\n    /* font-weight: 600; */\n    color: #fff;\n    display: flex;\n    height: 100vh;\n    background: center 100% no-repeat url(\'./images/cloud.jpg\');\n}\n#content > div {\n    padding-top: 60px;\n}\n\n#display {\n    padding-bottom: 60px;\n    display: flex;\n    flex-direction: column;\n    justify-content: space-between;\n    flex: 1;\n    padding-left: 60px;\n}\n#weather {\n    padding: 5px 20px;\n    background-color: rgba(31, 41, 55, 0.5);\n    display: flex;\n    gap: 15px;\n    align-items: center;\n    width: fit-content;\n}\n#weather > p{\n    line-height: 80px;\n    font-size: 80px;\n}\n#weather > div {\n    display: flex;\n    flex-direction: column;\n    text-align: center;\n}\n#weather > div > p:first-child {\n    font-size: 35px;\n    line-height: 35px;\n}\n#menu {\n    display: flex;\n    flex-direction: column;\n    gap: 50px;\n    width: 25vw;\n    padding-left: 50px;\n    padding-right: 50px;\n\n    background-color: rgba(31, 41, 55, 0.5);\n}\n#form {\n    display: flex;\n    gap: 10px;\n    align-items: center;\n}\n#detail {\n    display: flex;\n    flex-direction: column;\n    gap: 20px;\n}\n#detail li {\n    display: flex;\n    justify-content: space-between;\n}\n'],sourceRoot:""}]);const s=d},645:e=>{e.exports=function(e){var n=[];return n.toString=function(){return this.map((function(n){var t="",r=void 0!==n[5];return n[4]&&(t+="@supports (".concat(n[4],") {")),n[2]&&(t+="@media ".concat(n[2]," {")),r&&(t+="@layer".concat(n[5].length>0?" ".concat(n[5]):""," {")),t+=e(n),r&&(t+="}"),n[2]&&(t+="}"),n[4]&&(t+="}"),t})).join("")},n.i=function(e,t,r,o,i){"string"==typeof e&&(e=[[null,e,void 0]]);var a={};if(r)for(var c=0;c<this.length;c++){var A=this[c][0];null!=A&&(a[A]=!0)}for(var l=0;l<e.length;l++){var d=[].concat(e[l]);r&&a[d[0]]||(void 0!==i&&(void 0===d[5]||(d[1]="@layer".concat(d[5].length>0?" ".concat(d[5]):""," {").concat(d[1],"}")),d[5]=i),t&&(d[2]?(d[1]="@media ".concat(d[2]," {").concat(d[1],"}"),d[2]=t):d[2]=t),o&&(d[4]?(d[1]="@supports (".concat(d[4],") {").concat(d[1],"}"),d[4]=o):d[4]="".concat(o)),n.push(d))}},n}},667:e=>{e.exports=function(e,n){return n||(n={}),e?(e=String(e.__esModule?e.default:e),/^['"].*['"]$/.test(e)&&(e=e.slice(1,-1)),n.hash&&(e+=n.hash),/["'() \t\n]|(%20)/.test(e)||n.needQuotes?'"'.concat(e.replace(/"/g,'\\"').replace(/\n/g,"\\n"),'"'):e):e}},537:e=>{e.exports=function(e){var n=e[1],t=e[3];if(!t)return n;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),i="/*# ".concat(o," */");return[n].concat([i]).join("\n")}return[n].join("\n")}},379:e=>{var n=[];function t(e){for(var t=-1,r=0;r<n.length;r++)if(n[r].identifier===e){t=r;break}return t}function r(e,r){for(var i={},a=[],c=0;c<e.length;c++){var A=e[c],l=r.base?A[0]+r.base:A[0],d=i[l]||0,p="".concat(l," ").concat(d);i[l]=d+1;var s=t(p),u={css:A[1],media:A[2],sourceMap:A[3],supports:A[4],layer:A[5]};if(-1!==s)n[s].references++,n[s].updater(u);else{var C=o(u,r);r.byIndex=c,n.splice(c,0,{identifier:p,updater:C,references:1})}a.push(p)}return a}function o(e,n){var t=n.domAPI(n);return t.update(e),function(n){if(n){if(n.css===e.css&&n.media===e.media&&n.sourceMap===e.sourceMap&&n.supports===e.supports&&n.layer===e.layer)return;t.update(e=n)}else t.remove()}}e.exports=function(e,o){var i=r(e=e||[],o=o||{});return function(e){e=e||[];for(var a=0;a<i.length;a++){var c=t(i[a]);n[c].references--}for(var A=r(e,o),l=0;l<i.length;l++){var d=t(i[l]);0===n[d].references&&(n[d].updater(),n.splice(d,1))}i=A}}},569:e=>{var n={};e.exports=function(e,t){var r=function(e){if(void 0===n[e]){var t=document.querySelector(e);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(e){t=null}n[e]=t}return n[e]}(e);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(t)}},216:e=>{e.exports=function(e){var n=document.createElement("style");return e.setAttributes(n,e.attributes),e.insert(n,e.options),n}},565:(e,n,t)=>{e.exports=function(e){var n=t.nc;n&&e.setAttribute("nonce",n)}},795:e=>{e.exports=function(e){var n=e.insertStyleElement(e);return{update:function(t){!function(e,n,t){var r="";t.supports&&(r+="@supports (".concat(t.supports,") {")),t.media&&(r+="@media ".concat(t.media," {"));var o=void 0!==t.layer;o&&(r+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),r+=t.css,o&&(r+="}"),t.media&&(r+="}"),t.supports&&(r+="}");var i=t.sourceMap;i&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),n.styleTagTransform(r,e,n.options)}(n,e,t)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)}}}},589:e=>{e.exports=function(e,n){if(n.styleSheet)n.styleSheet.cssText=e;else{for(;n.firstChild;)n.removeChild(n.firstChild);n.appendChild(document.createTextNode(e))}}},358:(e,n,t)=>{e.exports=t.p+"1a8527725a1bf429f112.jpg"}},n={};function t(r){var o=n[r];if(void 0!==o)return o.exports;var i=n[r]={id:r,exports:{}};return e[r](i,i.exports,t),i.exports}t.m=e,t.n=e=>{var n=e&&e.__esModule?()=>e.default:()=>e;return t.d(n,{a:n}),n},t.d=(e,n)=>{for(var r in n)t.o(n,r)&&!t.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:n[r]})},t.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),t.o=(e,n)=>Object.prototype.hasOwnProperty.call(e,n),(()=>{var e;t.g.importScripts&&(e=t.g.location+"");var n=t.g.document;if(!e&&n&&(n.currentScript&&(e=n.currentScript.src),!e)){var r=n.getElementsByTagName("script");r.length&&(e=r[r.length-1].src)}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),t.p=e})(),t.b=document.baseURI||self.location.href,t.nc=void 0,(()=>{const e=e=>{const t=document.createElement("div"),r=document.createElement("h5");return r.textContent="city.current.weather",t.appendChild(r),t.appendChild(n(e)),t.setAttribute("id","display"),t},n=e=>{const n=document.createElement("div");n.setAttribute("id","weather");const t=document.createElement("p"),r=document.createElement("div"),o=document.createElement("div"),i=document.createElement("p"),a=document.createElement("p"),c=document.createElement("p"),l=document.createElement("p");return A("M6,19A5,5 0 0,1 1,14A5,5 0 0,1 6,9C7,6.65 9.3,5 12,5C15.43,5 18.24,7.66 18.5,11.03L19,11A4,4 0 0,1 23,15A4,4 0 0,1 19,19H6M19,13H17V12A5,5 0 0,0 12,7C9.5,7 7.45,8.82 7.06,11.19C6.73,11.07 6.37,11 6,11A3,3 0 0,0 3,14A3,3 0 0,0 6,17H19A2,2 0 0,0 21,15A2,2 0 0,0 19,13Z",60),t.textContent=e.temperature+"°",i.textContent=e.city,a.textContent=e.date.toDateString(),c.textContent=e.weather,l.textContent=e.description,r.appendChild(i),r.appendChild(a),o.appendChild(c),o.appendChild(l),n.appendChild(t),n.appendChild(r),n.appendChild(o),n},r=e=>{const n=document.createElement("div"),t=document.createElement("h3"),r=document.createElement("ul");t.textContent="Weather Details",n.appendChild(t),n.appendChild(r),n.setAttribute("id","detail");for(const n in e)r.appendChild(o(n,e[n]));return n},o=(e,n)=>{const t=document.createElement("li"),r=document.createElement("p"),o=document.createElement("p");return r.textContent=e,o.textContent="wind"==e?n+" km/h":n+"%",t.appendChild(r),t.appendChild(o),t},i=e=>{const n=document.createElement("ul");return e.forEach((e=>{n.appendChild(a(e))})),n},a=e=>{const n=document.createElement("li"),t=document.createElement("button");return t.textContent=e,n.appendChild(t),n},c=()=>{const e=document.createElement("form"),n=document.createElement("input"),t=A("M15.5,12C18,12 20,14 20,16.5C20,17.38 19.75,18.2 19.31,18.9L22.39,22L21,23.39L17.88,20.32C17.19,20.75 16.37,21 15.5,21C13,21 11,19 11,16.5C11,14 13,12 15.5,12M15.5,14A2.5,2.5 0 0,0 13,16.5A2.5,2.5 0 0,0 15.5,19A2.5,2.5 0 0,0 18,16.5A2.5,2.5 0 0,0 15.5,14M19.5,2A0.5,0.5 0 0,1 20,2.5V11.81C19.42,11.26 18.75,10.81 18,10.5V4.7L15,5.86V10C14.3,10.07 13.62,10.24 13,10.5V5.87L9,4.47V16.13H9V16.5C9,17.14 9.09,17.76 9.26,18.34L8,17.9L2.66,19.97L2.5,20A0.5,0.5 0 0,1 2,19.5V4.38C2,4.15 2.15,3.97 2.36,3.9L8,2L14,4.1L19.34,2.03L19.5,2M4,5.46V17.31L7,16.15V4.45L4,5.46Z",40);return n.placeholder="Another location",n.setAttribute("id","search"),n.required=!0,e.setAttribute("id","form"),e.appendChild(n),e.appendChild(t),e};function A(e,n){const t=document.createElementNS("http://www.w3.org/2000/svg","svg"),r=document.createElementNS("http://www.w3.org/2000/svg","path");return t.setAttribute("fill","currentColor"),t.setAttribute("width",n),t.setAttribute("height",n),t.setAttribute("viewBox","0 0 24 24"),t.setAttribute("stroke","currentColor"),r.setAttribute("d",e),t.appendChild(r),t}const l=async(e,n="")=>{const t=await fetch((e=>`https://api.openweathermap.org/data/2.5/weather?q=${e}&appid=91492b37eb6ad58d515d2091164745b6&units=metric`)(e),{mode:"cors"}),r=await t.json(),o=""==n?new Date:n;return d(r,o)},d=(e,n)=>({main:{city:e.name,temperature:parseInt(e.main.temp),date:n,weather:e.weather[0].main,description:e.weather[0].description},detail:{cloud:e.clouds.all,humidity:e.main.humidity,wind:e.wind.speed}});var p=t(379),s=t.n(p),u=t(795),C=t.n(u),f=t(569),m=t.n(f),h=t(565),g=t.n(h),x=t(216),I=t.n(x),b=t(589),v=t.n(b),B=t(424),y={};y.styleTagTransform=v(),y.setAttributes=g(),y.insert=m().bind(null,"head"),y.domAPI=C(),y.insertStyleElement=I(),s()(B.Z,y),B.Z&&B.Z.locals&&B.Z.locals;const w=document.getElementById("content");let E=["Shanghai","Beijing","Guangzhou","Chengdu"];function S(n){const t=document.getElementById("display"),o=document.getElementById("menu"),i=document.getElementById("detail");w.removeChild(t),w.insertBefore(e(n.main),o),o.removeChild(i),o.appendChild(r(n.detail))}!async function(n){await l("Shanghai").then((n=>{w.appendChild(e(n.main)),w.appendChild(((e,n)=>{const t=document.createElement("div");return t.setAttribute("id","menu"),t.appendChild(c()),t.appendChild(i(e)),t.appendChild(r(n)),t})(E,n.detail))})),function(){const e=document.getElementById("form"),n=document.getElementById("search");e.addEventListener("submit",(t=>{t.preventDefault(),l(n.value).then((n=>{S(n),e.reset()})).catch((n=>{alert("Location not found"),e.reset()}))})),document.querySelectorAll("#menu > ul > li").forEach((e=>{e.addEventListener("click",(e=>{const n=e.target.textContent;l(n).then((e=>{S(e)}))}))}))}()}()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,